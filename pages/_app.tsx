import type { AppProps } from "next/app"
import type { NextPage } from "next"
import type { Session, User } from "@supabase/supabase-js"
import { useRouter } from "next/router"
import { useEffect, useState, createContext, StrictMode } from "react"
import Head from "next/head"
import { CacheProvider, EmotionCache } from "@emotion/react"
import { ThemeProvider, CssBaseline, createTheme, Box } from "@mui/material"
import { ToastProvider } from "use-toast-mui"
import supabase from "../lib/supabase"
import LogoutButton from "../components/LogoutButton"
import { useAudio } from "react-use"

import "@fontsource/roboto/300.css"
import "@fontsource/roboto/400.css"
import "@fontsource/roboto/500.css"
import "@fontsource/roboto/700.css"

import createEmotionCache from "../util/createEmotionCache"
import darkThemeOptions from "../styles/theme/dark"
import "../styles/globals.css"
interface MyAppProps extends AppProps {
    emotionCache?: EmotionCache
}

type AuthContextType = {
    session: Nullable<Session>
    user: Nullable<User>
    signOut: () => Promise<void>
}

type AudioContextType = {
    playAudio: () => Promise<void>
}

export const AudioContext = createContext<AudioContextType>({
    async playAudio() {},
})

export const AuthContext = createContext<AuthContextType>({
    // Dummy object if the context is accessed outside a provider
    session: null,
    user: null,
    async signOut() {
        console.log("Signing out")
    },
})

type Nullable<T> = T | null

const clientSideEmotionCache = createEmotionCache()

const darkTheme = createTheme(darkThemeOptions)

const App: NextPage<MyAppProps> = ({ Component, pageProps }) => {
    const router = useRouter()
    const emotionCache = clientSideEmotionCache

    const [user, setUser] = useState<Nullable<User>>(null)
    const [session, setSession] = useState<Nullable<Session>>(null)

    useEffect(() => {
        const session = supabase.auth.session()
        setSession(session)
        setUser(session?.user ?? null)

        if (
            !session?.user &&
            !["/", "/login", "/signup"].includes(router.asPath)
        ) {
            router.push("/login")
        }

        const { data: authListener } = supabase.auth.onAuthStateChange(
            async (_event, session) => {
                setSession(session)
                const currentUser = session?.user
                setUser(currentUser ?? null)
            }
        )

        return () => {
            authListener?.unsubscribe()
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [user])

    const signOut = async () => {
        await supabase.auth.signOut()
        router.push("/login")
    }
    const [audio, state, controls, ref] = useAudio({
        src: "https://www.myinstants.com/media/sounds/wrong-answer-sound-effect.mp3",
        autoPlay: false,
    })

    return (
        <StrictMode>
            <Head>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
                <meta
                    name="viewport"
                    content="initial-scale=1, width=device-width"
                />
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
                <meta
                    name="viewport"
                    content="initial-scale=1, width=device-width"
                />
                <title>HotSeat</title>
            </Head>
            <AuthContext.Provider
                value={{
                    session,
                    user,
                    signOut,
                }}
            >
                <ToastProvider>
                    <CacheProvider value={emotionCache}>
                        <ThemeProvider theme={darkTheme}>
                            <CssBaseline />
                            <Box
                                sx={{
                                    display: "flex",
                                    flexDirection: "column",
                                    minHeight: "100vh",
                                }}
                            >
                                <AudioContext.Provider
                                    value={{
                                        async playAudio() {
                                            controls.seek(0)
                                            controls.play()
                                        },
                                    }}
                                >
                                    {audio}
                                    <Component {...pageProps} />
                                </AudioContext.Provider>
                                <LogoutButton />
                            </Box>
                        </ThemeProvider>
                    </CacheProvider>
                </ToastProvider>
            </AuthContext.Provider>
        </StrictMode>
    )
}

export default App
